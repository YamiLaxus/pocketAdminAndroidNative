package com.phonedev.pocketadminimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.view.Menuimport android.view.MenuItemimport android.view.Viewimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.recyclerview.widget.GridLayoutManagerimport com.firebase.ui.auth.AuthUIimport com.firebase.ui.auth.ErrorCodesimport com.firebase.ui.auth.IdpResponseimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.firestore.FirebaseFirestoreimport com.phonedev.pocketadmin.databinding.ActivityMainBindingclass MainActivity : AppCompatActivity(), onProductListenner {    private lateinit var binding: ActivityMainBinding    private lateinit var firebaseAuth: FirebaseAuth    private lateinit var authStateListener: FirebaseAuth.AuthStateListener    private lateinit var adapter: ProductAdapter    private val resultLauncher =        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {            val response = IdpResponse.fromResultIntent(it.data)            if (it.resultCode == RESULT_OK) {                val user = FirebaseAuth.getInstance().currentUser                if (user != null) {                    Toast.makeText(this, "Hola Bienvenido", Toast.LENGTH_SHORT).show()                }            } else {                if (response == null) {                    Toast.makeText(this, "Hasta Pronto", Toast.LENGTH_SHORT).show()                    finish()                } else {                    response.error?.let {                        if (it.errorCode == ErrorCodes.NO_NETWORK) {                            Toast.makeText(this, "Sin Coneccion", Toast.LENGTH_SHORT).show()                        } else {                            Toast.makeText(                                this,                                "Codigo de error: ${it.errorCode}",                                Toast.LENGTH_SHORT                            ).show()                        }                    }                }            }        }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = ActivityMainBinding.inflate(layoutInflater)        setContentView(binding.root)        configAuth()        configRecyclerView()        configFirestore()    }    private fun configAuth() {        firebaseAuth = FirebaseAuth.getInstance()        authStateListener = FirebaseAuth.AuthStateListener { auth ->            if (auth.currentUser != null) {                supportActionBar?.title = auth.currentUser?.displayName                binding.llProgress.visibility = View.GONE                binding.nsvProductos.visibility = View.VISIBLE            } else {                val providers = arrayListOf(                    AuthUI.IdpConfig.EmailBuilder().build(),                    AuthUI.IdpConfig.GoogleBuilder().build()                )                resultLauncher.launch(                    AuthUI.getInstance()                        .createSignInIntentBuilder()                        .setAvailableProviders(providers)                        .setIsSmartLockEnabled(false)                        .build()                )            }        }    }    override fun onResume() {        super.onResume()        firebaseAuth.addAuthStateListener(authStateListener)    }    override fun onPause() {        super.onPause()        firebaseAuth.removeAuthStateListener(authStateListener)    }    private fun configRecyclerView() {        adapter = ProductAdapter(mutableListOf(), this)        binding.recyclerView.apply {            layoutManager = GridLayoutManager(                this@MainActivity, 3,                GridLayoutManager.HORIZONTAL, false            )            adapter = this@MainActivity.adapter        }        /*(1..20).forEach {            val product = Product(                it.toString(), "Producto $it", "Este producto es el $it",                "", it, it * 1.1            )            adapter.add(product)        }*/    }    override fun onCreateOptionsMenu(menu: Menu?): Boolean {        menuInflater.inflate(R.menu.menu_main, menu)        return super.onCreateOptionsMenu(menu)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        when (item.itemId) {            R.id.action_sign_out -> {                AuthUI.getInstance().signOut(this)                    .addOnSuccessListener {                        Toast.makeText(this, "Sesión Cerrada", Toast.LENGTH_SHORT).show()                    }                    .addOnCompleteListener {                        if (it.isSuccessful) {                            binding.nsvProductos.visibility = View.GONE                            binding.llProgress.visibility = View.VISIBLE                        } else {                            Toast.makeText(this, "Sesión no Cerrada", Toast.LENGTH_SHORT).show()                        }                    }            }        }        return super.onOptionsItemSelected(item)    }    private fun configFirestore(){        val db = FirebaseFirestore.getInstance()        db.collection("products")            .get().addOnSuccessListener { snapshots ->                for (document in snapshots){                    val product = document.toObject(Product::class.java)                    adapter.add(product)                }            }            .addOnFailureListener {                Toast.makeText(this, "Error al consultar datos", Toast.LENGTH_SHORT).show()            }    }    override fun onClick(product: Product) {    }    override fun onLongClick(product: Product) {    }}